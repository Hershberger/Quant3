options(stringsAsFactors = FALSE)
library(causalA16)
library(data.table)
fraga_district_stats <-
fread("inst/extdata/Fraga2016_DistrictStats.csv")
fraga_district_treatment <-
fread("inst/extdata/Fraga2016_DistrictTreatmentResults.csv")
redistricting_by_state <-
data.table(state = c(list(unique(fraga_district_stats$state))))
View(redistricting_by_state)
redistricting_by_state <-
data.table(state = (list(unique(fraga_district_stats$state))))
redistricting_by_state <-
data.table(state = c(list(unique(fraga_district_stats$State))))
states <- list(unique(fraga_district_stats$State))
View(redistricting_by_state)
states <- c(list(unique(fraga_district_stats$State)))
redistricting_by_state <-
data.table(state = c((unique(fraga_district_stats$State))))
View(redistricting_by_state)
options(stringsAsFactors = FALSE)
library(causalA16)
library(data.table)
fraga_district_stats <-
fread("inst/extdata/Fraga2016_DistrictStats.csv")
fraga_district_treatment <-
fread("inst/extdata/Fraga2016_DistrictTreatmentResults.csv")
redistricting_by_state <-
data.table(state = c(unique(fraga_district_stats$State)))
options(stringsAsFactors = FALSE)
library(causalA16)
library(data.table)
fraga_district_stats <-
fread("inst/extdata/Fraga2016_DistrictStats.csv")
fraga_district_treatment <-
fread("inst/extdata/Fraga2016_DistrictTreatmentResults.csv")
View(fraga_district_treatment)
redistricting_by_state <-
data.table(State = c(unique(fraga_district_stats$State)))
partisan_redistrict <- c("AL", "FL", "IL", "MS", "NC", "NY", "SC", "TX")
# load package with external data
options(stringsAsFactors = FALSE)
library(causalA16)
library(data.table)
fraga_district_stats <-
fread("inst/extdata/Fraga2016_DistrictStats.csv")
fraga_district_treatment <-
fread("inst/extdata/Fraga2016_DistrictTreatmentResults.csv")
state_redistrict <- data.table(State = c(unique(fraga_district_stats$State)))
partisan_redistrict <- c("AL", "FL", "IL", "MS", "NC", "NY", "SC", "TX")
state_redistrict[, partisan_redistrict := 1 * (State %in% partisan_redistrict)]
View(state_redistrict)
# add redistricting stats
state_redistrict <- data.table(State = c(unique(fraga_district_stats$State)))
partisan_redistrict <- c("AL", "FL", "IL", "MS", "NC", "NY", "SC", "TX")
legis_republican_2010 <- c("AL", "AZ", "FL", "NC", "SC", "TX")
legis_republican_2012 <- c("AL", "AZ", "FL", "MS", "NC", "SC", "TX")
state_redistrict[, partisan_redistrict := 1 * (State %in% partisan_redistrict)]
state_redistrict[, legis_republican_2010 := 1 * (State %in% legis_republican_2010)]
state_redistrict[, legis_republican_2012 := 1 * (State %in% legis_republican_2012)]
# build package with functions only
devtools::document()
devtools::build()
devtools::install()
# load package with external data
options(stringsAsFactors = FALSE)
library(causalA16)
library(data.table)
fraga_district_stats <-
fread("inst/extdata/Fraga2016_DistrictStats.csv")
fraga_district_treatment <-
fread("inst/extdata/Fraga2016_DistrictTreatmentResults.csv")
# add redistricting stats
state_redistrict <- data.table(State = c(unique(fraga_district_stats$State)))
partisan_redistrict <- c("AL", "FL", "IL", "MS", "NC", "NY", "SC", "TX")
legis_republican_2010 <- c("AL", "AZ", "FL", "NC", "SC", "TX")
legis_republican_2012 <- c("AL", "AZ", "FL", "MS", "NC", "SC", "TX")
state_redistrict[, partisan_redistrict := 1 * (State %in% partisan_redistrict)]
state_redistrict[, legis_republican_2010 := 1 * (State %in% legis_republican_2010)]
state_redistrict[, legis_republican_2012 := 1 * (State %in% legis_republican_2012)]
# TODO: merge into other data
# TODO: get legislator party by district 2010 and 2012 from Volden & Wiseman
library(foreign)
cwdata <- read.dta("mariana/cwdata.dta")
#to create new variables a partir de las de _spline pero sin el guion bajo
library(plyr)
rename(cwdata,
c("_spline1"="spline1", "_spline2"="spline2", "_spline3"="spline3"))
cwdata$spline1 <- cwdata$`_spline1`
cwdata$spline2 <- cwdata$`_spline2`
cwdata$spline3 <- cwdata$`_spline3`
# To create a subset just with variables used in the model
##and in descpriptive stats:
myvars <- c("prio", "aidshock11", "aidshock11pos", "lPTSave_filled",
"lassassinbanks", "lriotsbanks", "lstrikesbanks", "ldemonstrationsbanks",
"linfantmort", "lnciv", "lpartautocracy", "lpartdemocracy", "lfactionaldemoc",
"lfulldemocracy", "lln_rgdpc", "lln_population", "loil", "linstab", "ethfrac",
"relfrac", "ncontig", "logmtn", "ColdWar", "spline1", "spline2", "spline3",
"year")
newdata<- cwdata[myvars]
setDT(cwdata)
cwdata[, prio, aidshock11, aidshock11pos]
#####################################################
################# Final Project  ####################
#####################################################
library(foreign)
cwdata <- read.dta("mariana/cwdata.dta")
#to create new variables a partir de las de _spline pero sin el guion bajo
library(plyr)
rename(cwdata,
c("_spline1"="spline1", "_spline2"="spline2", "_spline3"="spline3"))
cwdata$spline1 <- cwdata$`_spline1`
cwdata$spline2 <- cwdata$`_spline2`
cwdata$spline3 <- cwdata$`_spline3`
# To create a subset just with variables used in the model
##and in descpriptive stats:
myvars <- c("prio", "aidshock11", "aidshock11pos", "lPTSave_filled",
"lassassinbanks", "lriotsbanks", "lstrikesbanks", "ldemonstrationsbanks",
"linfantmort", "lnciv", "lpartautocracy", "lpartdemocracy", "lfactionaldemoc",
"lfulldemocracy", "lln_rgdpc", "lln_population", "loil", "linstab", "ethfrac",
"relfrac", "ncontig", "logmtn", "ColdWar", "spline1", "spline2", "spline3",
"year")
newdata<- cwdata[myvars]
library(Zelig)
library(texreg)
library(stargazer)
library(memisc)
mod1 <- zelig(prio ~ aidshock11 + aidshock11pos + lPTSave_filled +
lassassinbanks + lriotsbanks + lstrikesbanks + ldemonstrationsbanks +
linfantmort + lnciv + lpartautocracy + lpartdemocracy + lfactionaldemoc +
lfulldemocracy + lln_rgdpc + lln_population + loil + linstab + ethfrac +
relfrac + ncontig + logmtn + ColdWar + spline1 + spline2 + spline3 + year,
data = newdata, model = "relogit")
texreg(mod1)
toLatex(mod1)
mod2 <- glm(prio ~ aidshock11 + aidshock11pos + lPTSave_filled +
lassassinbanks + lriotsbanks + lstrikesbanks + ldemonstrationsbanks +
linfantmort + lnciv + lpartautocracy + lpartdemocracy + lfactionaldemoc +
lfulldemocracy + lln_rgdpc + lln_population + loil + linstab + ethfrac +
relfrac + ncontig + logmtn + ColdWar + spline1 + spline2 + spline3 + year,
data = newdata, family = binomial(link = "logit"))
library(stargazer)
stargazer(mod2, no.space = TRUE, single.row = TRUE)
# Matching:
library(Matching)
library(MASS)
datamatch <-na.omit(newdata[, c("aidshock11", "ethfrac", "prio")])
Y <- datamatch$prio
Tr <- datamatch$aidshock11
glm1 <- glm(Tr ~ ethfrac, family = binomial, data = datamatch)
summary(glm1)
stargazer(glm1)
rr1 <- Match(Y = Y, Tr = Tr, X = glm1$fitted, estimand = "ATE")
summary(rr1)
MatchBalance(Tr ~ ethfrac, match.out = rr1, nboots = 1000, data = datamatch)
install.packages("Zelig", dependencies = TRUE)
#####################################################
################# Final Project  ####################
#####################################################
library(foreign)
cwdata <- read.dta("mariana/cwdata.dta")
#to create new variables a partir de las de _spline pero sin el guion bajo
library(plyr)
rename(cwdata,
c("_spline1"="spline1", "_spline2"="spline2", "_spline3"="spline3"))
cwdata$spline1 <- cwdata$`_spline1`
cwdata$spline2 <- cwdata$`_spline2`
cwdata$spline3 <- cwdata$`_spline3`
# To create a subset just with variables used in the model
##and in descpriptive stats:
myvars <- c("prio", "aidshock11", "aidshock11pos", "lPTSave_filled",
"lassassinbanks", "lriotsbanks", "lstrikesbanks", "ldemonstrationsbanks",
"linfantmort", "lnciv", "lpartautocracy", "lpartdemocracy", "lfactionaldemoc",
"lfulldemocracy", "lln_rgdpc", "lln_population", "loil", "linstab", "ethfrac",
"relfrac", "ncontig", "logmtn", "ColdWar", "spline1", "spline2", "spline3",
"year")
newdata<- cwdata[myvars]
library(Zelig)
library(texreg)
library(stargazer)
library(memisc)
mod1 <- zelig(prio ~ aidshock11 + aidshock11pos + lPTSave_filled +
lassassinbanks + lriotsbanks + lstrikesbanks + ldemonstrationsbanks +
linfantmort + lnciv + lpartautocracy + lpartdemocracy + lfactionaldemoc +
lfulldemocracy + lln_rgdpc + lln_population + loil + linstab + ethfrac +
relfrac + ncontig + logmtn + ColdWar + spline1 + spline2 + spline3 + year,
data = newdata, model = "relogit")
texreg(mod1)
toLatex(mod1)
mod2 <- glm(prio ~ aidshock11 + aidshock11pos + lPTSave_filled +
lassassinbanks + lriotsbanks + lstrikesbanks + ldemonstrationsbanks +
linfantmort + lnciv + lpartautocracy + lpartdemocracy + lfactionaldemoc +
lfulldemocracy + lln_rgdpc + lln_population + loil + linstab + ethfrac +
relfrac + ncontig + logmtn + ColdWar + spline1 + spline2 + spline3 + year,
data = newdata, family = binomial(link = "logit"))
library(stargazer)
stargazer(mod2, no.space = TRUE, single.row = TRUE)
# Matching:
library(Matching)
library(MASS)
datamatch <-na.omit(newdata[, c("aidshock11", "ethfrac", "prio")])
Y <- datamatch$prio
Tr <- datamatch$aidshock11
glm1 <- glm(Tr ~ ethfrac, family = binomial, data = datamatch)
summary(glm1)
stargazer(glm1)
rr1 <- Match(Y = Y, Tr = Tr, X = glm1$fitted, estimand = "ATE")
summary(rr1)
MatchBalance(Tr ~ ethfrac, match.out = rr1, nboots = 1000, data = datamatch)
# build package with functions only
devtools::document()
devtools::build()
devtools::install()
# load package with external data
options(stringsAsFactors = FALSE)
library(causalA16)
library(data.table)
fraga_district_stats <-
fread("inst/extdata/Fraga2016_DistrictStats.csv")
fraga_district_treatment <-
fread("inst/extdata/Fraga2016_DistrictTreatmentResults.csv")
# add redistricting stats
state_redistrict <- data.table(State = c(unique(fraga_district_stats$State)))
partisan_redistrict <- c("AL", "FL", "IL", "MS", "NC", "NY", "SC", "TX")
legis_republican_2010 <- c("AL", "AZ", "FL", "NC", "SC", "TX")
legis_republican_2012 <- c("AL", "AZ", "FL", "MS", "NC", "SC", "TX")
state_redistrict[, partisan_redistrict := 1 * (State %in% partisan_redistrict)]
state_redistrict[, legis_republican_2010 := 1 * (State %in% legis_republican_2010)]
state_redistrict[, legis_republican_2012 := 1 * (State %in% legis_republican_2012)]
# TODO: merge into other data
# TODO: get legislator party by district 2010 and 2012 from Volden & Wiseman
set.seed(sample.int(.Machine$integer.max, 1))
sample.int(.Machine$integer.max, 1)
sample.int(.Machine$integer.max, 1)
sample.int(.Machine$integer.max, 1)
library(magrittr)
View(cwdata)
# build package with functions only
devtools::document()
devtools::build()
devtools::install()
# build package with functions only
devtools::document()
devtools::build()
devtools::install()
?bootstrap_confint
?causalA16::bootstrap_confint
bootstrap_confint <- function(formula, DATA, reps = 1000) {
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
setDT(DATA)
reps %>% replicate(DATA[n, replace = TRUE] %>% lm(formula) %>% coef)
%>% quantile(c(.025, .975))
}
# build package with functions only
devtools::document()
devtools::build()
devtools::install()
# build package with functions only
devtools::document()
devtools::build()
devtools::install()
bootstrap_confint_glm <- function(formula, DATA, reps = 1000, family, link) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
setDT(DATA)
reps %>% replicate(DATA[n, replace = TRUE] %>% glm(formula,
family(link)) %>% coef) %>% quantile(c(.025, .975))
}
library(foreign)
cwdata <- read.dta("mariana/cwdata.dta")
#to create new variables a partir de las de _spline pero sin el guion bajo
library(plyr)
rename(cwdata,
c("_spline1"="spline1", "_spline2"="spline2", "_spline3"="spline3"))
cwdata$spline1 <- cwdata$`_spline1`
cwdata$spline2 <- cwdata$`_spline2`
cwdata$spline3 <- cwdata$`_spline3`
myvars <- c("prio", "aidshock11", "aidshock11pos", "lPTSave_filled",
"lassassinbanks", "lriotsbanks", "lstrikesbanks", "ldemonstrationsbanks",
"linfantmort", "lnciv", "lpartautocracy", "lpartdemocracy", "lfactionaldemoc",
"lfulldemocracy", "lln_rgdpc", "lln_population", "loil", "linstab", "ethfrac",
"relfrac", "ncontig", "logmtn", "ColdWar", "spline1", "spline2", "spline3",
"year")
newdata<- cwdata[myvars]
bootstrap_confint_glm(formula = formula1, DATA = myvars, reps = 1000,
family = binomial, link = "logit")
bootstrap_confint_glm <- function(formula, DATA, reps = 1000, family, link) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
reps %>% replicate(DATA[n, replace = TRUE, ] %>% glm(formula,
family(link)) %>% coef) %>% quantile(c(.025, .975))
}
bootstrap_confint_glm(formula = formula1, DATA = myvars, reps = 1000,
family = binomial, link = "logit")
bootstrap_confint_glm <- function(formula, DATA, reps = 1000, family, link) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
setDT(DATA)
reps %>% replicate(DATA[sample(n, replace = TRUE)] %>% glm(formula,
family(link)) %>% coef) %>% quantile(c(.025, .975))
}
bootstrap_confint_glm(formula = formula1, DATA = myvars, reps = 1000,
family = binomial, link = "logit")
bootstrap_confint_glm(formula = formula1, DATA = newdata, reps = 1000,
family = binomial, link = "logit")
formula1 <- prio ~ aidshock11 + aidshock11pos + lPTSave_filled +
lassassinbanks + lriotsbanks + lstrikesbanks + ldemonstrationsbanks +
linfantmort + lnciv + lpartautocracy + lpartdemocracy + lfactionaldemoc +
lfulldemocracy + lln_rgdpc + lln_population + loil + linstab + ethfrac +
relfrac + ncontig + logmtn + ColdWar + spline1 + spline2 + spline3 + year
bootstrap_confint_glm(formula = formula1, DATA = newdata, reps = 1000,
family = binomial, link = "logit")
bootstrap_confint_glm <- function(formula, DATA, reps = 1000, family) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
reps %>% replicate(DATA[sample(n, replace = TRUE)] %>% glm(formula,
family(link)) %>% coef) %>% quantile(c(.025, .975))
}
bootstrap_confint_glm(formula = formula1, DATA = newdata, reps = 1000,
family = binomial)
?glm
bootstrap_confint_glm <- function(formula, DATA, reps = 1000, family) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
reps %>% replicate(DATA[sample(n, replace = TRUE)] %>% glm(formula, family, .)
%>% coef) %>% quantile(c(.025, .975))
}
bootstrap_confint_glm(formula = formula1, DATA = newdata, reps = 1000,
family = binomial)
bootstrap_confint_glm(formula = formula1, DATA = newdata[1:15,], reps = 5,
family = binomial)
View(newdata)
View(cwdata)
summary(cwdata$prio)
bootstrap_confint_glm(formula = formula1,
DATA = newdata[!is.na(newdata$prio), ][1:15],
reps = 5, family = binomial)
bootstrap_confint_glm(formula = formula1,
DATA = newdata[!is.na(newdata$prio), ][1:15, ],
reps = 5, family = binomial)
formula1 <- prio ~ aidshock11 #  + aidshock11pos + lPTSave_filled +
bootstrap_confint_glm(formula = formula1,
DATA = newdata[!is.na(newdata$prio), ][1:15, ],
reps = 5, family = binomial)
short_data <- newdata
short_data[!is.na(prio) & !is.na(aidshock11)]
short_data[!is.na(prio) & !is.na(aidshock11)]
short_data[!is.na(prio) & !is.na(aidshock11), .(prio, aidshock11)]
?causalA16:::bootstrap_confint_lm
?causalA16::bootstrap_confint_lm
?causalA16::bootstrap_confint_lm
?causalA16:::bootstrap_confint_lm
bootstrap_confint_lm <- function(formula, DATA, reps = 1000) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
setDT(DATA)
reps %>% replicate(DATA[n, replace = TRUE] %>% lm(formula) %>% coef)
%>% quantile(c(.025, .975))
}
library(magrittr)
bootstrap_confint_lm <- function(formula, DATA, reps = 1000) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
setDT(DATA)
reps %>% replicate(DATA[n, replace = TRUE] %>% lm(formula) %>% coef)
%>% quantile(c(.025, .975))
bootstrap_confint_lm <- function(formula, DATA, reps = 1000) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
setDT(DATA)
reps %>% replicate(DATA[n, replace = TRUE] %>% lm(formula) %>% coef) %>%
quantile(c(.025, .975))
}
b0 <- 1.5
x1 <- rnorm(1000, 0, 5)
x2 <- rt(1000, 15, 2)
y <- -7 + 2.5 * x1 + 0.1 * x2
lm(y ~ x1 + x2)
x1 <- rnorm(1000, 0, 5)
x2 <- rt(1000, 15, 2)
y <- -7 + 2.5 * x1 + 0.1 * x2
lm(y ~ x1 + x2)
y <- -7 + 2.5 * x1 + 0.1 * x2 + rnorm(1000)
summary(lm(y ~ x1 + x2))
?rpois
rpois(10, 10)
rpois(10, 1000)
?rbinom
y <- -7 + 2.5 * x1 + 0.1 * x2 + rpois(1000, 5) * t(rbinom(1000, 1, .7))
summary(lm(y ~ x1 + x2))
x1 <- rnorm(1000, 0, 5)
x2 <- rt(1000, 15, 2)
y <- -7 + 2.5 * x1 + 0.1 * x2 + rpois(1000, 5) * t(rbinom(1000, 1, .7))
summary(lm(y ~ x1 + x2))
y <- -7 + 2.5 * x1 + 0.1 * x2 + (rpois(1000, 5) * rbinom(1000, 1, .7))
summary(lm(y ~ x1 + x2))
test <- (rpois(1000, 5) * rbinom(1000, 1, .7))
summary(lm(y ~ x1 + x2))
formula_test <- y ~ x1 + x2
summary(lm(formula_test))
data_test <- cbind(y, x1, x2)
View(data_test)
bootstrap_confint_lm(formula = formula_test, DATA = data_test)
bootstrap_confint_lm <- function(formula, DATA, reps = 1000) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
reps %>% replicate(DATA[n, replace = TRUE] %>% lm(formula) %>% coef) %>%
quantile(c(.025, .975))
}
bootstrap_confint_lm(formula = formula_test, DATA = data_test)
View(data_test)
bootstrap_confint_lm(formula = formula_test, DATA = data_test, reps = 1)
bootstrap_confint_lm(formula = y ~ x1 + x2, DATA = data_test, reps = 1)
bootstrap_confint_lm(formula_test, DATA = data_test, reps = 1)
library(magrittr)
n <- nrow(data_test)
reps %>% replicate(data_test[n, replace = TRUE] %>% lm(y ~ x1 + x2) %>% quantile(c(0.025, 0.975)))
1000 %>% replicate(data_test[n, replace = TRUE] %>% lm(y ~ x1 + x2) %>% quantile(c(0.025, 0.975)))
bootstrap_confint_lm <- function(formula, DATA, reps = 1000) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
reps %>% replicate(DATA[n, replace = TRUE] %>% lm(formula) %>% coef) %>%
extract(2, ) %>%  quantile(c(.025, .975))
}
1000 %>% replicate(data_test[n, replace = TRUE] %>% lm(y ~ x1 + x2) %>%
extract(2,) %>% quantile(c(0.025, 0.975)))
lm(y ~ x1 + x2, data = data_test)
data_test <- data.frame(cbind(y, x1, x2))
library(magrittr)
n <- nrow(data_test)
1000 %>% replicate(data_test[n, replace = TRUE] %>% lm(y ~ x1 + x2) %>%
extract(2,) %>% quantile(c(0.025, 0.975)))
1000 %>% replicate(data_test[sample(n, replace = TRUE)] %>% lm(y ~ x1 + x2) %>%
extract(2,) %>% quantile(c(0.025, 0.975)))
?sample
?sample
boot_stuff <- sample(data_test, 1000, replace = TRUE)
boot_OLS <- function(data, formula) {
idx <- sample(1:nrow(data), nrow(data), replace = TRUE)
coef(lm(formula, idx))
}
boot_OLS(data = data_test, formula = formula_test)
boot_confint <- replicate(1000, boot_OLS(data = data_test, formula = formula_test))
x1 <- rnorm(1000, 0, 5)
x2 <- rt(1000, 15, 2)
y <- -7 + 2.5 * x1 + 0.1 * x2 + (rpois(1000, 5) * rbinom(1000, 1, .7))
boot_OLS <- function(data, formula) {
idx <- sample(1:nrow(data), nrow(data), replace = TRUE)
coef(lm(formula, idx))
}
boot_confint <- replicate(1000, boot_OLS(data = data_test, formula = formula_test))
data_test <- data.frame(cbind(y, x1, x2))
formula_test <- y ~ x1 + x2
summary(lm(formula_test, data = data_test))
boot_confint <- replicate(1000, boot_OLS(data = data_test, formula = formula_test))
bootstrap_confint_glm <- function(formula, DATA, reps = 1000, family) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
reps %>% replicate(DATA[sample(n, replace = TRUE)] %>% glm(formula, family, .)
%>% coef) %>% quantile(c(.025, .975))
}
x <- rnorm(1000)
y <- rbinom(1000, 1, 0.5)
data_test <- data.table(rbind(y, x))
View(data_test)
data_test <- data.table(cbind(y, x))
formula <- y ~ x
formula_test <- y ~ x
bootstrap_confint_glm(formula = formula_test, DATA = data_test, reps = 5, family = binomial)
bootstrap_confint_lm <- function(formula, DATA, reps = 1000) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
setDT(DATA)
reps %>% replicate(DATA[n, replace = TRUE] %>% lm(formula, .) %>% coef) %>%
quantile(c(.025, .975))
}
bootstrap_confint_lm(formula = formula_test, DATA = data_test, reps = 5)
bootstrap_confint_lm <- function(formula, DATA, reps = 1000) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
setDT(DATA)
reps %>% replicate(DATA[sample(n, replace = TRUE)] %>% lm(formula, .) %>% coef) %>%
quantile(c(.025, .975))
}
bootstrap_confint_lm(formula = formula_test, DATA = data_test, reps = 5)
x <- rnorm(1000)
y <- rbinom(1000, 1, 0.5)
data_test <- data.table(cbind(y, x))
formula_test <- y ~ x
bootstrap_confint_glm(formula = formula_test, DATA = data_test, reps = 5, family = binomial)
bootstrap_confint_lm <- function(formula, DATA, reps = 1000) {
library(magrittr)
set.seed(sample.int(.Machine$integer.max, 1))
n <- nrow(DATA)
setDT(DATA)
reps %>% replicate(DATA[sample(n, replace = TRUE)] %>% lm(formula, .) %>% coef) %>%
quantile(c(.025, .975))
}
