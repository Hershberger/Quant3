# cat("* conf. int. *", "\n")
# return(confint_3)
}
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 5000)
mean(alabama_1$Turnout08_U)
redistricting_simulation <- function(DT, n_redistricted, reps) {
turnout_1 <- DT$turnout_1
redistrict_distribution_1 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
confint_1 <- quantile(redistrict_distribution_1, probs = c(0.01, 0.99))
cat("* election 1 *", "\n")
cat("* conf. int. *", "\n")
return(confint_1)
# turnout_2 <- DT$turnout_2
# redistrict_distribution_2 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
# confint_2 <- quantile(redistrict_distribution_2, probs = c(0.025, 0.975))
# cat("* election 2 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_2)
# turnout_3 <- DT$turnout_3
# redistrict_distribution_3 <- replicate(reps, mean(sample(turnout_3, size = n_redistricted)))
# confint_3 <- quantile(redistrict_distribution_3, probs = c(0.025, 0.975))
# cat("* election 3 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_3)
}
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 5000)
redistricting_simulation <- function(DT, n_redistricted, reps) {
turnout_1 <- DT$turnout_2
redistrict_distribution_1 <- replicate(reps, mean(sample(turnout_1, size = n_redistricted)))
confint_1 <- quantile(redistrict_distribution_1, probs = c(0.01, 0.99))
cat("* election 1 *", "\n")
cat("* conf. int. *", "\n")
return(confint_1)
# turnout_2 <- DT$turnout_2
# redistrict_distribution_2 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
# confint_2 <- quantile(redistrict_distribution_2, probs = c(0.025, 0.975))
# cat("* election 2 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_2)
# turnout_3 <- DT$turnout_3
# redistrict_distribution_3 <- replicate(reps, mean(sample(turnout_3, size = n_redistricted)))
# confint_3 <- quantile(redistrict_distribution_3, probs = c(0.025, 0.975))
# cat("* election 3 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_3)
}
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 5000)
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 10000)
redistricting_simulation <- function(DT, n_redistricted, reps) {
turnout_1 <- DT$turnout_3
redistrict_distribution_1 <- replicate(reps, mean(sample(turnout_1, size = n_redistricted)))
confint_1 <- quantile(redistrict_distribution_1, probs = c(0.01, 0.99))
cat("* election 1 *", "\n")
cat("* conf. int. *", "\n")
return(confint_1)
# turnout_2 <- DT$turnout_2
# redistrict_distribution_2 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
# confint_2 <- quantile(redistrict_distribution_2, probs = c(0.025, 0.975))
# cat("* election 2 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_2)
# turnout_3 <- DT$turnout_3
# redistrict_distribution_3 <- replicate(reps, mean(sample(turnout_3, size = n_redistricted)))
# confint_3 <- quantile(redistrict_distribution_3, probs = c(0.025, 0.975))
# cat("* election 3 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_3)
}
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 10000)
mean(alabama_1$Turnout10_U)
redistricting_simulation <- function(DT, n_redistricted, reps) {
turnout_1 <- DT$turnout_2
redistrict_distribution_1 <- replicate(reps, mean(sample(turnout_1, size = n_redistricted)))
confint_1 <- quantile(redistrict_distribution_1, probs = c(0.025, 0.975))
cat("* election 1 *", "\n")
cat("* conf. int. *", "\n")
return(confint_1)
# turnout_2 <- DT$turnout_2
# redistrict_distribution_2 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
# confint_2 <- quantile(redistrict_distribution_2, probs = c(0.025, 0.975))
# cat("* election 2 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_2)
# turnout_3 <- DT$turnout_3
# redistrict_distribution_3 <- replicate(reps, mean(sample(turnout_3, size = n_redistricted)))
# confint_3 <- quantile(redistrict_distribution_3, probs = c(0.025, 0.975))
# cat("* election 3 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_3)
}
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 10000)
mean(alabama_1$Turnout08_U)
redistricting_simulation <- function(DT, n_redistricted, reps) {
turnout_1 <- DT$turnout_1
redistrict_distribution_1 <- replicate(reps, mean(sample(turnout_1, size = n_redistricted)))
confint_1 <- quantile(redistrict_distribution_1, probs = c(0.005, 0.995))
cat("* election 1 *", "\n")
cat("* conf. int. *", "\n")
return(confint_1)
# turnout_2 <- DT$turnout_2
# redistrict_distribution_2 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
# confint_2 <- quantile(redistrict_distribution_2, probs = c(0.025, 0.975))
# cat("* election 2 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_2)
# turnout_3 <- DT$turnout_3
# redistrict_distribution_3 <- replicate(reps, mean(sample(turnout_3, size = n_redistricted)))
# confint_3 <- quantile(redistrict_distribution_3, probs = c(0.025, 0.975))
# cat("* election 3 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_3)
}
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 10000)
mean(alabama_1$Turnout06_U)
View(district_year_wide)
library(causalA16)
source("dev/generate_fake_district_stats.R")
load("data/district_year_wide.RData")
alabama_1 <- district_year_wide[State == "AL" & PreDist == 1]
alabama_1_test <- turnout_by_subdistrict(district_year_data = alabama_1,
irregular_voter_percent = 0.05)
View(alabama_1)
View(alabama_1_test)
# need to develop statistical tests for gerrymandering
redistricting_simulation <- function(DT, n_redistricted, reps) {
turnout_1 <- DT$turnout_1
redistrict_distribution_1 <- replicate(reps, mean(sample(turnout_1, size = n_redistricted)))
confint_1 <- quantile(redistrict_distribution_1, probs = c(0.005, 0.995))
cat("* election 1 *", "\n")
cat("* conf. int. *", "\n")
return(confint_1)
# turnout_2 <- DT$turnout_2
# redistrict_distribution_2 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
# confint_2 <- quantile(redistrict_distribution_2, probs = c(0.025, 0.975))
# cat("* election 2 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_2)
# turnout_3 <- DT$turnout_3
# redistrict_distribution_3 <- replicate(reps, mean(sample(turnout_3, size = n_redistricted)))
# confint_3 <- quantile(redistrict_distribution_3, probs = c(0.025, 0.975))
# cat("* election 3 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_3)
}
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 10000)
mean(alabama_1_test$turnout_1[alabama_1_test$post_district == 7])
View(district_year_wide)
mean(alabama_1_test$turnout_1[alabama_1_test$post_district == 1])
library(causalA16)
source("dev/generate_fake_district_stats.R")
load("data/district_year_wide.RData")
alabama_1 <- district_year_wide[State == "AL" & PreDist == 1]
alabama_1_test <- turnout_by_subdistrict(district_year_data = alabama_1,
irregular_voter_percent = 0.05)
# need to develop statistical tests for gerrymandering
redistricting_simulation <- function(DT, n_redistricted, reps) {
turnout_1 <- DT$turnout_1
redistrict_distribution_1 <- replicate(reps, mean(sample(turnout_1, size = n_redistricted)))
confint_1 <- quantile(redistrict_distribution_1, probs = c(0.0005, 0.9995))
cat("* election 1 *", "\n")
cat("* conf. int. *", "\n")
return(confint_1)
# turnout_2 <- DT$turnout_2
# redistrict_distribution_2 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
# confint_2 <- quantile(redistrict_distribution_2, probs = c(0.025, 0.975))
# cat("* election 2 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_2)
# turnout_3 <- DT$turnout_3
# redistrict_distribution_3 <- replicate(reps, mean(sample(turnout_3, size = n_redistricted)))
# confint_3 <- quantile(redistrict_distribution_3, probs = c(0.025, 0.975))
# cat("* election 3 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_3)
}
# testing this shows with 99% confidence that the people moved were a group who
# turned out more in non-presidential election years more than others in AL 1
# AL 7 is the only district represented by a Democrat
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 10000)
mean(alabama_1_test$turnout_1[alabama_1_test$post_district == 7])
/
library(causalA16)
source("dev/generate_fake_district_stats.R")
load("data/district_year_wide.RData")
alabama_1 <- district_year_wide[State == "AL" & PreDist == 1]
alabama_1_test <- turnout_by_subdistrict(district_year_data = alabama_1,
irregular_voter_percent = 0.05)
# need to develop statistical tests for gerrymandering
redistricting_simulation <- function(DT, n_redistricted, reps) {
turnout_1 <- DT$turnout_1
redistrict_distribution_1 <- replicate(reps, mean(sample(turnout_1, size = n_redistricted)))
confint_1 <- quantile(redistrict_distribution_1, probs = c(0.00005, 0.99995))
cat("* election 1 *", "\n")
cat("* conf. int. *", "\n")
return(confint_1)
# turnout_2 <- DT$turnout_2
# redistrict_distribution_2 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
# confint_2 <- quantile(redistrict_distribution_2, probs = c(0.025, 0.975))
# cat("* election 2 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_2)
# turnout_3 <- DT$turnout_3
# redistrict_distribution_3 <- replicate(reps, mean(sample(turnout_3, size = n_redistricted)))
# confint_3 <- quantile(redistrict_distribution_3, probs = c(0.025, 0.975))
# cat("* election 3 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_3)
}
# testing this shows with 99% confidence that the people moved were a group who
# turned out more in non-presidential election years more than others in AL 1
# AL 7 is the only district represented by a Democrat
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 10000)
mean(alabama_1_test$turnout_1[alabama_1_test$post_district == 7])
library(causalA16)
source("dev/generate_fake_district_stats.R")
load("data/district_year_wide.RData")
alabama_1 <- district_year_wide[State == "AL" & PreDist == 1]
alabama_1_test <- turnout_by_subdistrict(district_year_data = alabama_1,
irregular_voter_percent = 0.05)
# need to develop statistical tests for gerrymandering
redistricting_simulation <- function(DT, n_redistricted, reps) {
turnout_1 <- DT$turnout_1
redistrict_distribution_1 <- replicate(reps, mean(sample(turnout_1, size = n_redistricted)))
confint_1 <- quantile(redistrict_distribution_1, probs = c(0.000005, 0.999995))
cat("* election 1 *", "\n")
cat("* conf. int. *", "\n")
return(confint_1)
# turnout_2 <- DT$turnout_2
# redistrict_distribution_2 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
# confint_2 <- quantile(redistrict_distribution_2, probs = c(0.025, 0.975))
# cat("* election 2 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_2)
# turnout_3 <- DT$turnout_3
# redistrict_distribution_3 <- replicate(reps, mean(sample(turnout_3, size = n_redistricted)))
# confint_3 <- quantile(redistrict_distribution_3, probs = c(0.025, 0.975))
# cat("* election 3 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_3)
}
# testing this shows with 99% confidence that the people moved were a group who
# turned out more in non-presidential election years more than others in AL 1
# AL 7 is the only district represented by a Democrat
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 10000)
mean(alabama_1_test$turnout_1[alabama_1_test$post_district == 7])
library(causalA16)
source("dev/generate_fake_district_stats.R")
load("data/district_year_wide.RData")
alabama_1 <- district_year_wide[State == "AL" & PreDist == 1]
alabama_1_test <- turnout_by_subdistrict(district_year_data = alabama_1,
irregular_voter_percent = 0.05)
# need to develop statistical tests for gerrymandering
redistricting_simulation <- function(DT, n_redistricted, reps) {
turnout_1 <- DT$turnout_1
redistrict_distribution_1 <- replicate(reps, mean(sample(turnout_1, size = n_redistricted)))
confint_1 <- quantile(redistrict_distribution_1, probs = c(0.005, 0.995))
cat("* election 1 *", "\n")
cat("* conf. int. *", "\n")
return(confint_1)
# turnout_2 <- DT$turnout_2
# redistrict_distribution_2 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
# confint_2 <- quantile(redistrict_distribution_2, probs = c(0.025, 0.975))
# cat("* election 2 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_2)
# turnout_3 <- DT$turnout_3
# redistrict_distribution_3 <- replicate(reps, mean(sample(turnout_3, size = n_redistricted)))
# confint_3 <- quantile(redistrict_distribution_3, probs = c(0.025, 0.975))
# cat("* election 3 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_3)
}
# testing this shows with 99% confidence that the people moved were a group who
# turned out more in non-presidential election years more than others in AL 1
# AL 7 is the only district represented by a Democrat
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 10000)
mean(alabama_1_test$turnout_1[alabama_1_test$post_district == 7])
library(causalA16)
source("dev/generate_fake_district_stats.R")
load("data/district_year_wide.RData")
alabama_1 <- district_year_wide[State == "AL" & PreDist == 1]
alabama_1_test <- turnout_by_subdistrict(district_year_data = alabama_1,
irregular_voter_percent = 0.10)
redistricting_simulation <- function(DT, n_redistricted, reps) {
turnout_1 <- DT$turnout_1
redistrict_distribution_1 <- replicate(reps, mean(sample(turnout_1, size = n_redistricted)))
confint_1 <- quantile(redistrict_distribution_1, probs = c(0.005, 0.995))
cat("* election 1 *", "\n")
cat("* conf. int. *", "\n")
return(confint_1)
# turnout_2 <- DT$turnout_2
# redistrict_distribution_2 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
# confint_2 <- quantile(redistrict_distribution_2, probs = c(0.025, 0.975))
# cat("* election 2 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_2)
# turnout_3 <- DT$turnout_3
# redistrict_distribution_3 <- replicate(reps, mean(sample(turnout_3, size = n_redistricted)))
# confint_3 <- quantile(redistrict_distribution_3, probs = c(0.025, 0.975))
# cat("* election 3 *", "\n")
# cat("* conf. int. *", "\n")
}
# testing this shows with 99% confidence that the people moved were a group who
# return(confint_3)
# turned out more in non-presidential election years more than others in AL 1
# AL 7 is the only district represented by a Democrat
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 10000)
mean(alabama_1_test$turnout_1[alabama_1_test$post_district == 7])
library(causalA16)
source("dev/generate_fake_district_stats.R")
load("data/district_year_wide.RData")
alabama_1 <- district_year_wide[State == "AL" & PreDist == 1]
alabama_1_test <- turnout_by_subdistrict(district_year_data = alabama_1,
irregular_voter_percent = 0.0)
# need to develop statistical tests for gerrymandering
redistricting_simulation <- function(DT, n_redistricted, reps) {
turnout_1 <- DT$turnout_1
redistrict_distribution_1 <- replicate(reps, mean(sample(turnout_1, size = n_redistricted)))
confint_1 <- quantile(redistrict_distribution_1, probs = c(0.005, 0.995))
cat("* election 1 *", "\n")
cat("* conf. int. *", "\n")
return(confint_1)
# turnout_2 <- DT$turnout_2
# redistrict_distribution_2 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
# confint_2 <- quantile(redistrict_distribution_2, probs = c(0.025, 0.975))
# cat("* election 2 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_2)
# turnout_3 <- DT$turnout_3
# redistrict_distribution_3 <- replicate(reps, mean(sample(turnout_3, size = n_redistricted)))
# confint_3 <- quantile(redistrict_distribution_3, probs = c(0.025, 0.975))
# cat("* election 3 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_3)
}
# testing this shows with 99% confidence that the people moved were a group who
# turned out more in non-presidential election years more than others in AL 1
# AL 7 is the only district represented by a Democrat
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 10000)
mean(alabama_1_test$turnout_1[alabama_1_test$post_district == 7])
library(causalA16)
source("dev/generate_fake_district_stats.R")
load("data/district_year_wide.RData")
alabama_1 <- district_year_wide[State == "AL" & PreDist == 1]
alabama_1_test <- turnout_by_subdistrict(district_year_data = alabama_1,
irregular_voter_percent = 0.05)
# need to develop statistical tests for gerrymandering
redistricting_simulation <- function(DT, n_redistricted, reps) {
turnout_1 <- DT$turnout_1
redistrict_distribution_1 <- replicate(reps, mean(sample(turnout_1, size = n_redistricted)))
confint_1 <- quantile(redistrict_distribution_1, probs = c(0.005, 0.995))
cat("* election 1 *", "\n")
cat("* conf. int. *", "\n")
return(confint_1)
# turnout_2 <- DT$turnout_2
# redistrict_distribution_2 <- replicate(reps, mean(sample(turnout_2, size = n_redistricted)))
# confint_2 <- quantile(redistrict_distribution_2, probs = c(0.025, 0.975))
# cat("* election 2 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_2)
# turnout_3 <- DT$turnout_3
# redistrict_distribution_3 <- replicate(reps, mean(sample(turnout_3, size = n_redistricted)))
# confint_3 <- quantile(redistrict_distribution_3, probs = c(0.025, 0.975))
# cat("* election 3 *", "\n")
# cat("* conf. int. *", "\n")
# return(confint_3)
}
# testing this shows with 99% confidence that the people moved were a group who
# turned out more in non-presidential election years more than others in AL 1
# AL 7 is the only district represented by a Democrat
redistricting_simulation(alabama_1_test, n_redistricted = 948, reps = 10000)
mean(alabama_1_test$turnout_1[alabama_1_test$post_district == 7])
library(causalA16)
load("data/district_year_wide.RData")
View(district_year_wide)
load("~/GitHub/Quant3/causalA16/data/district_year.RData")
View(district_year)
# build package with functions only
devtools::document()
devtools::build()
devtools::install()
?causalA16::turnout_by_subdistrict
library(causalA16)
?turnout_by_subdistrict
turnout_by_subdistrict()
library(causalA16)
library(data.table)
source("R/generate_fake_district_stats.R")
library(wfe)
load("data/district_year_wide.RData")
source("R/generate_fake_district_stats.R")
individual_turnout <- turnout_by_subdistrict(district_year_wide, .1)
View(individual_turnout)
library(causalA16)
library(data.table)
library(wfe)
load("data/district_year_wide.RData")
View(district_year_wide)
?wfe::wfe
load("data/district_year.RData")
View(district_year)
table(district_year$Treatment)
district_year[, maj_treatment := 0, cand_treatment := 0, incum_treatment := 0]
district_year[, maj_treatment := 0]
district_year[, cand_treatment := 0]
district_year[, inc_treatment := 0]
summary(district_year$inc_treatment)
library(causalA16)
library(data.table)
library(wfe)
load("data/district_year.RData")
incumbent_district_year <- district_year[Treatment == "Inc", ]
candidate_district_year <- district_year[Treatment == "Cand",]
majority_district_year <- district_year[Treatment == "Maj", ]
View(district_year)
install.packages("survey")
library(survey)
fraga2016 <- read.csv("inst/extdata/Fraga2016_DistrictStats.csv")
View(fraga2016)
library(causalA16)
library(data.table)
library(wfe)
library(survey)
load("data/district_year.RData")
# subset data based on treatment
incumbent_district_year <- district_year[Treatment == "Inc", ]
candidate_district_year <- district_year[Treatment == "Cand",]
majority_district_year <- district_year[Treatment == "Maj", ]
library(lfe)
?lfe::felm
View(candidate_district_year)
same_post_dist <- district_year[PreDist == PostDist, ]
View(same_post_dist)
summary(same_post_dist$coethnic_district)
summary(same_post_dist$coethnic_incumbent)
summary(same_post_dist$coethnic_candidate)
library(causalA16)
library(data.table)
library(wfe)
library(lfe)
library(survey)
load("data/district_year.RData")
# subset data based on treatment
incumbent_district_year <- district_year[Treatment == "Inc", ]
candidate_district_year <- district_year[Treatment == "Cand",]
majority_district_year <- district_year[Treatment == "Maj", ]
source("R/generate_fake_district_stats.R")
View(incumbent_district_year)
turnout_by_subdistrict(incumbent_district_year[year == 2006,])
turnout_by_subdistrict(incumbent_district_year[year == 2006,], 0.05)
individual_turnout_incumbent_treatment <-
turnout_by_subdistrict(incumbent_district_year[year == 2006,], 0.05)
individual_turnout_incumbent_treatment <-
turnout_by_subdistrict(incumbent_district_year[year == 2006,], 0.075)
individual_turnout_incumbent_treatment <-
turnout_by_subdistrict(incumbent_district_year[year == 2006,], 0.05)
library(causalA16)
library(data.table)
library(wfe)
library(lfe)
library(survey)
load("data/district_year.RData")
source("R/generate_fake_district_stats.R")
# subset data based on treatment
incumbent_district_year <- district_year[Treatment == "Inc", ]
individual_turnout_incumbent_treatment <-
turnout_by_subdistrict(incumbent_district_year[year == 2006,], 0.07)
individual_turnout_incumbent_treatment <-
library(causalA16)
library(data.table)
library(wfe)
library(lfe)
library(survey)
load("data/district_year.RData")
source("R/generate_fake_district_stats.R")
# subset data based on treatment
incumbent_district_year <- district_year[Treatment == "Inc", ]
individual_turnout_incumbent_treatment <-
turnout_by_subdistrict(incumbent_district_year[year == 2006,], 0.05)
View(individual_turnout_incumbent_treatment)
str(individual_turnout_incumbent_treatment)
individual_turnout_incumbent_treatment <-
rbind(
data.table(state = individual_turnout_incumbent_treatment$state,
pre_district = individual_turnout_incumbent_treatment$pre_district,
post_district = individual_turnout_incumbent_treatment$post_district,
year = 1, turnout = individual_turnout_incumbent_treatment$turnout_1),
data.table(state = individual_turnout_incumbent_treatment$state,
pre_district = individual_turnout_incumbent_treatment$pre_district,
post_district = individual_turnout_incumbent_treatment$post_district,
year = 2, turnout = individual_turnout_incumbent_treatment$turnout_2),
data.table(state = individual_turnout_incumbent_treatment$state,
pre_district = individual_turnout_incumbent_treatment$pre_district,
post_district = individual_turnout_incumbent_treatment$post_district,
year = 3, turnout = individual_turnout_incumbent_treatment$turnout_3),
data.table(state = individual_turnout_incumbent_treatment$state,
pre_district = individual_turnout_incumbent_treatment$pre_district,
post_district = individual_turnout_incumbent_treatment$post_district,
year = 4, turnout = individual_turnout_incumbent_treatment$turnout_4))
save(individual_turnout_incumbent_treatment,
"data/individual_turnout_incumbent_treatment.RData")
save(individual_turnout_incumbent_treatment,
"data/individual_turnout_incumbent_treatment.RData")
save(individual_turnout_incumbent_treatment,
file = "data/individual_turnout_incumbent_treatment.RData")
load("data/individual_turnout_incumbent_treatment.RData")
load("data/individual_turnout_incumbent_treatment.RData")
library(wfe)
library(causalA16)
library(survey)
load("data/individual_turnout_incumbent_treatment.RData")
help(memory.size)
