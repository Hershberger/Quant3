{
    "collab_server" : "",
    "contents" : "district_turnout_sample_1_year <- function(state, pre_district, post_district,\n  n_registrants, turnout_probability,\n  seed = sample.int(.Machine$integer.max, 1))\n{\n  library(data.table)\n  set.seed(seed)\n DT <- data.table(registrant_id = c(paste0(pre_district, post_district,\n     sprintf(\"%06.f\",1:n_registrants))),\n   pre_district = pre_district,\n   post_district = post_district,\n   state = state)\n turnout_count <- floor(n_registrants * turnout_probability)\n DT[, turnout_1 := 0]\n DT[sample(nrow(DT), turnout_count), turnout_1 := 1]\n out <- DT\n return(out)\n}\n\n\n# alabama_test <- district_turnout_sample_1_year(state = \"AL\", pre_district = 1,\n#   post_district = 1, n_registrants = 81200, turnout_probability = 0.3772660)\n\n# generate turnout assuming most of the same people turnout with some random error\n# turnout_data takes output of distirct_year_sample_1_year()\ndistrict_turnout_next_election <- function(turnout_data, turnout_probability,\n  irregular_voter_percent,\n  seed = sample.int(.Machine$integer.max, 1))\n{\n  DF <- data.frame(turnout_data)\n  last_election <- gsub(\"turnout_\", \"\", names(DF)[ncol(DF)])\n  this_election <- as.numeric(gsub(\"turnout_\", \"\", names(DF)[ncol(DF)])) + 1\n  DF$turnout <- DF[, c(length(DF))]\n  turnout_percent <- sum(DF$turnout) / nrow(DF)\n  turnout_change_percent <- turnout_probability - turnout_percent\n  turnout_change <- floor(abs(turnout_change_percent) * nrow(DF))\n  DT <- setDT(DF)\n  previous_voters <- DT[turnout == 1]\n  previous_nonvoters <- DT[turnout == 0]\n  irregular_voters <- floor(nrow(DT) * (irregular_voter_percent)/2)\n  if(irregular_voters + turnout_change > nrow(previous_nonvoters) &\n      turnout_change - irregular_voters < -1 * (nrow(previous_voters))) {\n    stop(\"more irregular voters than possible\")\n  } else if (turnout_change_percent > 0) {\n    previous_nonvoters[sample(nrow(previous_nonvoters), turnout_change),\n      turnout := 1]\n    current_nonvoters <- previous_nonvoters[turnout == 0]\n    current_voters <- previous_nonvoters[turnout == 1]\n    current_nonvoters[sample(nrow(current_nonvoters), irregular_voters),\n      turnout := 1]\n    previous_voters[sample(nrow(previous_voters), irregular_voters),\n      turnout := 0]\n    DT <- rbind(current_nonvoters, current_voters, previous_voters)\n  } else if (turnout_change_percent < 0) {\n    previous_voters[sample(nrow(previous_voters), abs(turnout_change)),\n      turnout := 0]\n    current_voters <- previous_voters[turnout == 1]\n    current_nonvoters <- previous_voters[turnout == 0]\n    current_voters[sample(nrow(current_voters), irregular_voters),\n      turnout := 0]\n    previous_nonvoters[sample(nrow(previous_nonvoters), irregular_voters),\n      turnout := 1]\n    DT <- rbind(current_voters, current_nonvoters, previous_nonvoters)\n  } else {\n    previous_voters[sample(nrow(previous_voters), irregular_voters),\n      turnout := 0]\n    previous_nonvoters[sample(nrow(previous_nonvoters), irregular_voters),\n      turnout := 1]\n    DT <- rbind(previous_voters, previous_nonvoters)\n  }\n  setnames(DT, \"turnout\", paste0(\"turnout_\", this_election))\n  out <- DT\n  return(out)\n}\n\n# alabama_test <- district_turnout_next_election(turnout_data = alabama_test,\n#   turnout_probability = 0.7065271, irregular_voter_percent = 0.01)\n\n# for getting all elections data for a single subdistrict\nsubdistrict_turnout_full <- function(state, pre_district, post_district,\n  n_registrants, turnout_probability_vector, irregular_voter_percent,\n  n_elections,\n  seed = sample.int(.Machine$integer.max, 1)) {\n  counter <- 1\n  set.seed(seed)\n  if (length(turnout_probability_vector) != n_elections) {\n    stop(\"there must be turnout probabilities equal to the number of elections\")\n  }\n  if (counter == 1) {\n    cat(\"*** \", state, pre_district, \"to\", state, post_district, \"\\n\")\n    turnout_data <- district_turnout_sample_1_year(state = state,\n      pre_district = pre_district, post_district = post_district,\n      n_registrants = n_registrants,\n      turnout_probability = turnout_probability_vector[1])\n    counter <- counter + 1\n  }\n    while (counter >= 2 & counter <= n_elections) {\n     turnout_data <- district_turnout_next_election(turnout_data = turnout_data,\n        turnout_probability = turnout_probability_vector[counter],\n        irregular_voter_percent = irregular_voter_percent)\n     counter <- counter + 1\n  }\n  out <- turnout_data\n  return(out)\n}\n\nturnout_by_subdistrict <- function(district_year_data, irregular_voter_percent) {\n  dist_df <- as.data.frame(district_year_data)\n  counter <- 1\n  dist_df <- as.data.frame(district_year_data)\n  if (counter == 1) {\n    dist_DT <- subdistrict_turnout_full(state = dist_df[1, 1],\n      pre_district = dist_df[1, 2],\n      post_district = dist_df[1, 3],\n      n_registrants = dist_df[1, 6],\n      turnout_probability_vector = c(dist_df[1, 7], dist_df[1, 8],\n        dist_df[1, 9], dist_df[1, 10]),\n      irregular_voter_percent = irregular_voter_percent,\n      n_elections = 4)\n    counter <- counter +1\n  }\n  while (counter > 1 & counter <= nrow(dist_df)){\n    temp_DT <- subdistrict_turnout_full(state = dist_df[counter, 1],\n      pre_district = dist_df[counter, 2],\n      post_district = dist_df[counter, 3],\n      n_registrants = dist_df[counter, 6],\n      turnout_probability_vector = c(dist_df[counter, 7], dist_df[counter, 8],\n        dist_df[counter, 9], dist_df[counter, 10]),\n      irregular_voter_percent = irregular_voter_percent,\n      n_elections = 4)\n    dist_DT <- rbind(dist_DT, temp_DT)\n    counter <- counter + 1\n  }\n  return(dist_DT)\n}\n\n# test <- turnout_by_subdistrict(district_year_wide[State == \"AL\" & PreDist == 1],\n#   irregular_voter_percent = 0.01)\n",
    "created" : 1481055485205.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3529530992",
    "id" : "7D1E409C",
    "lastKnownWriteTime" : 1481055355,
    "last_content_update" : 1481055355,
    "path" : "~/GitHub/Quant3/causalA16/R/generate_fake_district_stats.R",
    "project_path" : "R/generate_fake_district_stats.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}