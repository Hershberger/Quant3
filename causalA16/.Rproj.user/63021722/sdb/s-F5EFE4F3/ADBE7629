{
    "collab_server" : "",
    "contents" : "#' Simulate a binary valued potential outcomes model\n#'\n#' Makes binary causal states and binary valued potential outcomes\n#' @param n number of observations\n#' @param seed RNG seed\n#' @return data.table with potential outcomes\n#' @import data.table\n#' @export\nsimulate_potential_outcomes <- function(n,\n  seed = sample.int(.Machine$integer.max, 1))\n{\n  set.seed(seed)\n  prob_y1 <- runif(1, min = .5, max = 1)\n  prob_y0 <- 1 - prob_y0\n  DATA <- data.table(\n    y0 = 1 * (runif(n) < prob_y0),\n    y1 = 1 * (runif(n) < prob_y1))\n  attr(DATA, \"seed\") <- seed\n  DATA\n}\n\n#' Simulate a simple experiment\n#'\n#' Simulates potential outcomes and adds a treatment variable, assumes SUTVA,\n#' defines the observed outcomes, deletes potential outcomes, and returns the\n#' results\n#' @param n number of observations\n#' @param seed RNG seed\n#' @param prob_treatment probability of treatment\n#' @return data.table with potential outcomes\n#' @import data.table\n#' @export\nsimulate_simple_experiment <- function(n, prob_treatment = .5,\n  seed = sample.int(.Machine$integer.max, 1))\n{\n  set.seed(seed)\n  DATA <- simulate_potential_outcomes(n)\n  DATA[, prob_treatment := prob_treatment]\n  DATA[, d := 1 * (runif(n) < prob_treatment)]\n  DATA[, y := d * y1 + (1 - d) * y0]\n  DATA[, `:=`(y1 = NULL, y0 = NULL)]\n  attr(DATA, \"seed\") <- seed\n  DATA\n}\n\n#' Simulate an observational study\n#'\n#' Simulates potential outcomes and adds a treatment variable, assumes SUTVA,\n#' defines the observed outcomes, deletes potential outcomes, and returns the\n#' results\n#' @param n number of observations\n#' @param seed RNG seed\n#' @param prob probability\n#' @return data.table with potential outcomes\n#' @import data.table\n#' @export\nsimulate_observational_study <- function(n,\n  seed = sample.int(.Machine$integer.max, 1))\n{\n  set.seed(seed)\n  DATA <- simulate_potential_outcomes(n, seed = seed)\n  DATA[, prob_d_equals_1 := plogis(-2 + 4 * (y1 - y0))]\n  DATA[, d := 1 * (runif(n) < prob_d_equals_1)]\n  DATA[, y := d * y1 + (1 - d) * y0]\n  DATA[, `:=`(y1 = NULL, y0 = NULL, prob_d_equals_1 = NULL)]\n  attr(DATA, \"seed\") <- seed\n  DATA\n}\n\n#' Calculate the naive difference in means\n#'\n#' Calculate the naive difference in means\n#' @param DATA a dataset\n#' @return number\n#' @import data.table\n#' @export\ncalc_naive_difference_in_means <- function(DATA)\n{\n  DATA[, mean(y[d == 1]) - mean(y[d == 0])]\n}\n",
    "created" : 1475525851980.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "915280622",
    "id" : "ADBE7629",
    "lastKnownWriteTime" : 1475518251,
    "last_content_update" : 1475518251,
    "path" : "~/GitHub/Quant3/causalA16/R/potential_outcomes.R",
    "project_path" : "R/potential_outcomes.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}